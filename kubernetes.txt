KUBERNETES INSTALLATION
=======================
#!/bin/bash
# Swap memory
swapoff -a

# Install Docker
sudo apt-get update

sudo apt-get install -y\
    apt-transport-https \
    ca-certificates \
    curl \
    software-properties-common

curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

sudo add-apt-repository \
   "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable"

sudo apt-get update
sudo apt-get install -y docker-ce docker-ce-cli containerd.io

# Install Kubernetes
sudo apt-get update && sudo apt-get install -y apt-transport-https curl
curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-archive-keyring.gpg
echo "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
sudo apt-get update
#sudo apt-get install -y kubelet kubeadm kubectl



===============================================================================
##after this run only in master
sudo kubeadm init

# run this commands (generated by init command in master node)
mkdir -p $HOME/.kube                                                                                             
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

# After it will generate token that token will copy and paste it in all worker node
Eg. : sudo kubeadm join 172.31.15.245:6443 --token a5koyo.bhrc83qjhwt4s5gh         --discovery-token-ca-cert-hash sha256:530fae703321782f3c362c5af1055c158265b850b6aa9e14f4b8d3940efcecd6
 
To check pods information : kubectl get nodes
 â†’ (in master node - all worker node will be not ready so run CNI plugin in master node)

# CNI Plugin Installation: (run in master node)
 kubectl apply -f https://github.com/weaveworks/weave/releases/download/v2.8.1/weave-daemonset-k8s.yaml


==================================================================================
vi service.yml
kind: Service
apiVersion: v1
metadata:
  name: demoservice
spec:
  ports:
    - port: 80
      targetPort: 80
  selector:
    name: deployment
  type: ClusterIP


Commands:
kubectl apply -f .
kubectl get deploy
kubectl get rs
kubectl get pods
kubectl get svc 
curl ip:80
================================================================================
vi deploy.yml
kind: Deployment
apiVersion: apps/v1
metadata:
  name: skillrary
spec:
  replicas: 1
  selector:
    matchLabels:
      name: deployment
  template:
    metadata:
      name: vip
      labels:
        name: deployment
    spec:
      containers:
        - name: abcd
          image: httpd
          ports:
            - containerPort: 80

Commands:
-->kubectl apply -f deploy.yml
kubectl get pods
kubectl get rs
kubectl get pods -o wide
curl ip

===========================================================================
Communication b/w containers to containers in the same pod


kind: Pod
apiVersion: v1
metadata:
  name: flipcart
spec:
  containers:
    - name: c1
      image: ubuntu
      command: ["/bin/bash", "-c", "while true; do echo hello; sleep 5; done"]
    - name: c2
      image: httpd
      ports:
        - containerPort: 80


Command:
   1.  kubectl apply -f pod1.yml
   2.  kubectl get pods
   3.  kubectl exec -it flipcart -c c1 -- /bin/bash
   4.  curl localhost:80
   5.  apt update -y
   6.  apt install curl -y
   

====================================================================================
vi host.yml  -----> volume type

apiVersion: v1
kind: Pod
metadata:
  name: demo
spec:
  containers:
  - image: centos
    name: sample
    command: ["/bin/bash","-c","sleep 15000"]
    volumeMounts:
      - mountPath: /tmp/hostpath
        name: skillrary
  volumes:
  - name: skillrary
    hostPath:
      path: /tmp/data

Command:
kubectl apply -f empty.yml
kubectl get pods
kubectl exec -it demo -c sample -- /bin/bash
cd /tmp/
ls
cd hostpath/
ls 
echo "checking" >>sam.txt
chech in workernode
=====================================================================================
vi empty.yml   --->  type of volume

apiVersion: v1
kind: Pod
metadata:
  name: demo
spec:
  containers:
  - image: centos
    name: sample
    command: ["/bin/bash","-c","sleep 15000"]
    volumeMounts:
      - mountPath: /tmp/hostpath
        name: skillrary
  volumes:
  - name: skillrary
    hostPath:
      path: /tmp/data

Command:
kubectl apply -f empty.yml
kubectl exec -it volume -c c00 -- /bin/bash
ls  cd qspider/
echo "backup" >> sample.txt
chech in worker node
